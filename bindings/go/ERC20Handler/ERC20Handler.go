// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ERC20Handler

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ERC20HandlerDepositRecord is an auto generated low-level Go binding around an user-defined struct.
type ERC20HandlerDepositRecord struct {
	TokenAddress                common.Address
	DestinationChainID          uint8
	ResourceID                  [32]byte
	DestinationRecipientAddress []byte
	Depositer                   common.Address
	Amount                      *big.Int
	SignData                    []byte
}

// ERC20HandlerABI is the input ABI used to generate the binding from.
const ERC20HandlerABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"initialResourceIDs\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"initialContractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"burnableContractAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"LogString\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_bridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_burnList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_contractWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"_depositRecords\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_destinationRecipientAddress\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_depositer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"h\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"_recoverSigner2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_resourceIDToTokenContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_safeTransferETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_tokenContractAddressToResourceID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addressToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"bytesToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address[36]\",\"name\":\"signers\",\"type\":\"address[36]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"destId\",\"type\":\"uint8\"}],\"name\":\"getDepositRecord\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_destinationRecipientAddress\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_depositer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signData\",\"type\":\"bytes\"}],\"internalType\":\"structERC20Handler.DepositRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setBurnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[36]\",\"name\":\"signers\",\"type\":\"address[36]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"test\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"toStringBase\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"uintToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]"

// ERC20HandlerBin is the compiled bytecode used for deploying new contracts.
var ERC20HandlerBin = "0x60806040523480156200001157600080fd5b50604051620046d2380380620046d2833981810160405281019062000037919062000483565b81518351146200007e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000075906200062c565b60405180910390fd5b836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005b8351811015620001135762000105848281518110620000dc57fe5b6020026020010151848381518110620000f157fe5b60200260200101516200015f60201b60201c565b8080600101915050620000c1565b5060005b81518110156200015457620001468282815181106200013257fe5b60200260200101516200025160201b60201c565b808060010191505062000117565b505050505062000751565b806001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16620002e0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002d7906200060a565b60405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000815190506200034c816200071d565b92915050565b600082601f8301126200036457600080fd5b81516200037b62000375826200067c565b6200064e565b91508181835260208401935060208101905083856020840282011115620003a157600080fd5b60005b83811015620003d55781620003ba88826200033b565b845260208401935060208301925050600181019050620003a4565b5050505092915050565b600082601f830112620003f157600080fd5b8151620004086200040282620006a5565b6200064e565b915081818352602084019350602081019050838560208402820111156200042e57600080fd5b60005b838110156200046257816200044788826200046c565b84526020840193506020830192505060018101905062000431565b5050505092915050565b6000815190506200047d8162000737565b92915050565b600080600080608085870312156200049a57600080fd5b6000620004aa878288016200033b565b945050602085015167ffffffffffffffff811115620004c857600080fd5b620004d687828801620003df565b935050604085015167ffffffffffffffff811115620004f457600080fd5b620005028782880162000352565b925050606085015167ffffffffffffffff8111156200052057600080fd5b6200052e8782880162000352565b91505092959194509250565b600062000549602483620006ce565b91507f70726f766964656420636f6e7472616374206973206e6f742077686974656c6960008301527f73746564000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000620005b1603c83620006ce565b91507f696e697469616c5265736f7572636549447320616e6420696e697469616c436f60008301527f6e7472616374416464726573736573206c656e206d69736d61746368000000006020830152604082019050919050565b6000602082019050818103600083015262000625816200053a565b9050919050565b600060208201905081810360008301526200064781620005a2565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156200067257600080fd5b8060405250919050565b600067ffffffffffffffff8211156200069457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115620006bd57600080fd5b602082029050602081019050919050565b600082825260208201905092915050565b6000620006ec82620006fd565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200072881620006df565b81146200073457600080fd5b50565b6200074281620006f3565b81146200074e57600080fd5b50565b613f7180620007616000396000f3fe6080604052600436106101395760003560e01c80637f79bea8116100ab578063b8fa37361161006f578063b8fa3736146104a8578063ba484c09146104d1578063c8ba6c871461050e578063cc3dd1af1461054b578063d9caed1214610574578063e93956791461059d57610140565b80637f79bea81461038b5780638d1b75e4146103c85780638f667892146104055780639201de551461044257806395601f091461047f57610140565b806339614e4f116100fd57806339614e4f1461023f5780634402027f1461027c5780635de11799146102bf5780635e57966d146102e85780636a70d08114610325578063783b6c541461036257610140565b806307b7ed99146101455780630a6d55d81461016e578063138f0b8b146101ab578063318c136e146101eb57806338995da91461021657610140565b3661014057005b600080fd5b34801561015157600080fd5b5061016c60048036038101906101679190612bc6565b6105da565b005b34801561017a57600080fd5b5061019560048036038101906101909190612cfd565b6105ee565b6040516101a29190613840565b60405180910390f35b3480156101b757600080fd5b506101d260048036038101906101cd9190612d62565b610621565b6040516101e29493929190613953565b60405180910390f35b3480156101f757600080fd5b50610200610a48565b60405161020d9190613840565b60405180910390f35b34801561022257600080fd5b5061023d60048036038101906102389190612e33565b610a6c565b005b34801561024b57600080fd5b5061026660048036038101906102619190612ec5565b610ff9565b60405161027391906139f8565b60405180910390f35b34801561028857600080fd5b506102a3600480360381019061029e9190612f6b565b61102a565b6040516102b697969594939291906138bb565b60405180910390f35b3480156102cb57600080fd5b506102e660048036038101906102e19190612c3e565b6111f6565b005b3480156102f457600080fd5b5061030f600480360381019061030a9190612bc6565b6111fa565b60405161031c91906139f8565b60405180910390f35b34801561033157600080fd5b5061034c60048036038101906103479190612bc6565b61122b565b6040516103599190613938565b60405180910390f35b34801561036e57600080fd5b5061038960048036038101906103849190612c3e565b61124b565b005b34801561039757600080fd5b506103b260048036038101906103ad9190612bc6565b61124f565b6040516103bf9190613938565b60405180910390f35b3480156103d457600080fd5b506103ef60048036038101906103ea9190612ec5565b61126f565b6040516103fc91906139f8565b60405180910390f35b34801561041157600080fd5b5061042c60048036038101906104279190612dd0565b6114f2565b6040516104399190613840565b60405180910390f35b34801561044e57600080fd5b5061046960048036038101906104649190612cfd565b6115bc565b60405161047691906139f8565b60405180910390f35b34801561048b57600080fd5b506104a660048036038101906104a19190612bef565b6115ed565b005b3480156104b457600080fd5b506104cf60048036038101906104ca9190612d26565b611604565b005b3480156104dd57600080fd5b506104f860048036038101906104f39190612f2f565b61161a565b6040516105059190613c9a565b60405180910390f35b34801561051a57600080fd5b5061053560048036038101906105309190612bc6565b611894565b6040516105429190613998565b60405180910390f35b34801561055757600080fd5b50610572600480360381019061056d9190612c7a565b6118ac565b005b34801561058057600080fd5b5061059b60048036038101906105969190612bef565b6119cf565b005b3480156105a957600080fd5b506105c460048036038101906105bf9190612f06565b611a1c565b6040516105d191906139f8565b60405180910390f35b6105e2611a4d565b6105eb81611add565b50565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008061062f611a4d565b7fa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f60405161065c90613c5a565b60405180910390a160006106cb6106c4600060208a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611bc49092919063ffffffff16565b6000611d15565b90507fa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f6106f782611a1c565b60405161070491906139f8565b60405180910390a16060610769602060148a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611bc49092919063ffffffff16565b90506000602082015190507fa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f6107a18260601c6111fa565b6040516107ae91906139f8565b60405180910390a17fa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f6040516107e390613c1a565b60405180910390a160006107f88b8b8b611d73565b9050600015158115151415610853577fa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f60405161083490613afa565b60405180910390a1600080306000975097509750975050505050610a3d565b7fa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f60405161088090613b9a565b60405180910390a16000600160008e815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690507fa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f6040516108ed90613bda565b60405180910390a1600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610981576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097890613c7a565b60405180910390fd5b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610a1b577fa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f604051610a0090613bfa565b60405180910390a1610a16818460601c87611e88565b610a2a565b610a29818460601c87611f00565b5b6000823087985098509850985050505050505b945094509450949050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610a74611a4d565b60007fa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f604051610aa390613b7a565b60405180910390a1610b10610b096000602086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611bc49092919063ffffffff16565b6000611d15565b90507fa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f610b3c82611a1c565b604051610b4991906139f8565b60405180910390a16060610bae6020601486868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611bc49092919063ffffffff16565b90507fa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f610bda82610ff9565b604051610be791906139f8565b60405180910390a17fa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f604051610c1c90613bba565b60405180910390a16000600160008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690507fa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f610c86826111fa565b604051610c9391906139f8565b60405180910390a1600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610d27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1e90613c7a565b60405180910390fd5b7fa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f610d51876111fa565b604051610d5e91906139f8565b60405180910390a1600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610dc857610dc3818785611f16565b610dd5565b610dd481873086611f8e565b5b7fa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f604051610e0290613b5a565b60405180910390a16040518060e001604052808273ffffffffffffffffffffffffffffffffffffffff1681526020018960ff1681526020018a81526020018381526020018773ffffffffffffffffffffffffffffffffffffffff16815260200184815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815250600560008a60ff1660ff16815260200190815260200160002060008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360ff160217905550604082015181600101556060820151816002019080519060200190610f7c929190612902565b5060808201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816004015560c0820151816005019080519060200190610fea929190612902565b50905050505050505050505050565b60606110238260405160200161100f91906137e6565b60405160208183030381529060405261126f565b9050919050565b6005602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff1690806001015490806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111225780601f106110f757610100808354040283529160200191611122565b820191906000526020600020905b81548152906001019060200180831161110557829003601f168201915b5050505050908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806004015490806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111ec5780601f106111c1576101008083540402835291602001916111ec565b820191906000526020600020905b8154815290600101906020018083116111cf57829003601f168201915b5050505050905087565b5050565b60606112248260405160200161121091906137b0565b60405160208183030381529060405261126f565b9050919050565b60046020528060005260406000206000915054906101000a900460ff1681565b5050565b60036020528060005260406000206000915054906101000a900460ff1681565b6060806040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506060600284510260020167ffffffffffffffff811180156112ca57600080fd5b506040519080825280601f01601f1916602001820160405280156112fd5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061132e57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061138b57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b84518110156114e7578260048683815181106113d557fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff168151811061141457fe5b602001015160f81c60f81b82600283026002018151811061143157fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b86838151811061147257fe5b602001015160f81c60f81b1660f81c60ff168151811061148e57fe5b602001015160f81c60f81b8260028302600301815181106114ab57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506113bd565b508092505050919050565b600060606040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152509050600081876040516020016115439291906137fd565b60405160208183030381529060405280519060200120905060006001828888886040516000815260200160405260405161158094939291906139b3565b6020604051602081039080840390855afa1580156115a2573d6000803e3d6000fd5b505050602060405103519050809350505050949350505050565b60606115e6826040516020016115d291906137cb565b60405160208183030381529060405261126f565b9050919050565b60008390506115fe81843085611fa6565b50505050565b61160c611a4d565b611616828261202f565b5050565b611622612982565b600560008360ff1660ff16815260200190815260200160002060008467ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1660ff1660ff16815260200160018201548152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117815780601f1061175657610100808354040283529160200191611781565b820191906000526020600020905b81548152906001019060200180831161176457829003601f168201915b505050505081526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118835780601f1061185857610100808354040283529160200191611883565b820191906000526020600020905b81548152906001019060200180831161186657829003601f168201915b505050505081525050905092915050565b60026020528060005260406000206000915090505481565b7fa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f6040516118d990613c5a565b60405180910390a160006119486119416000602086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611bc49092919063ffffffff16565b6000611d15565b905061195381612121565b60606119b06020601486868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611bc49092919063ffffffff16565b90506000602082015190506119c78160601c6121ba565b505050505050565b6119d7611a4d565b7fa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f604051611a0490613b1a565b60405180910390a1611a17838383611f00565b505050565b6060611a4682604051602001611a329190613825565b60405160208183030381529060405261126f565b9050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611adb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad290613a3a565b60405180910390fd5b565b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611b69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6090613a9a565b60405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b606081601f83011015611c0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0390613b3a565b60405180910390fd5b828284011015611c51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4890613b3a565b60405180910390fd5b81830184511015611c97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8e90613c3a565b60405180910390fd5b6060821560008114611cb85760405191506000825260208201604052611d09565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015611cf65780518352602083019250602081019050611cd9565b50868552601f19601f8301166040525050505b50809150509392505050565b60006020820183511015611d5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5590613a5a565b60405180910390fd5b60008260200184015190508091505092915050565b600060606000611de1611dda603460ff16602088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611bc49092919063ffffffff16565b6000612253565b9050611e4c602060340160ff1660206112440361ffff1687878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611bc49092919063ffffffff16565b9150611e566129f1565b611e5e6129f1565b611e67846122c5565b8092508193505050611e7b8382848b6123a3565b9450505050509392505050565b60008390508073ffffffffffffffffffffffffffffffffffffffff166340c10f1984846040518363ffffffff1660e01b8152600401611ec8929190613892565b600060405180830381600087803b158015611ee257600080fd5b505af1158015611ef6573d6000803e3d6000fd5b5050505050505050565b6000839050611f108184846124dd565b50505050565b60008390508073ffffffffffffffffffffffffffffffffffffffff166379cc679084846040518363ffffffff1660e01b8152600401611f56929190613892565b600060405180830381600087803b158015611f7057600080fd5b505af1158015611f84573d6000803e3d6000fd5b5050505050505050565b6000849050611f9f81858585611fa6565b5050505050565b612029846323b872dd60e01b858585604051602401611fc79392919061385b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612563565b50505050565b806001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6121b7816040516024016121359190613cbc565b6040516020818303038152906040527ff5b1bba9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612677565b50565b612250816040516024016121ce9190613840565b6040516020818303038152906040527f2c2ecbc2000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612677565b50565b60008060005b60208110156122ba576008810260ff60f81b868387018151811061227957fe5b602001015160f81c60f81b167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c821791508080600101915050612259565b508091505092915050565b6122cd6129f1565b6122d56129f1565b6122dd6129f1565b6122e56129f1565b6000604060410160ff16905060005b602460ff168160ff1610156123945761232b828260ff160267ffffffffffffffff16604060ff1689611bc49092919063ffffffff16565b848260ff166024811061233a57fe5b6020020181905250612370604060ff16838360ff16020167ffffffffffffffff16604160ff1689611bc49092919063ffffffff16565b838260ff166024811061237f57fe5b602002018190525080806001019150506122f4565b50828294509450505050915091565b6000806000905060008060008093505b602460ff168460ff16101561248e576123de878560ff16602481106123d457fe5b60200201516126a0565b9050600015156123ee82886126bc565b151514156123fb57612481565b61241989898660ff166024811061240e57fe5b602002015183612740565b9150811561242a5782806001019350505b60198360ff1610612480576124736040518060400160405280601081526020017f766572696679206973204f4b202e2e2e00000000000000000000000000000000815250612788565b60019450505050506124d5565b5b83806001019450506123b3565b6124cc6040518060400160405280601481526020017f766572696679206973206661696c6564202e2e2e000000000000000000000000815250612788565b60009450505050505b949350505050565b61255e8363a9059cbb60e01b84846040516024016124fc929190613892565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612563565b505050565b600060608373ffffffffffffffffffffffffffffffffffffffff168360405161258c91906137e6565b6000604051808303816000865af19150503d80600081146125c9576040519150601f19603f3d011682016040523d82523d6000602084013e6125ce565b606091505b509150915081612613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260a90613ada565b60405180910390fd5b60008151111561267157808060200190518101906126319190612cd4565b612670576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161266790613a1a565b60405180910390fd5b5b50505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6000808280519060200120905080600052600051915050919050565b6000806000905060005b602460ff168160ff161015612734578473ffffffffffffffffffffffffffffffffffffffff16848260ff16602481106126fb57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1614156127275760019250505061273a565b80806001019150506126c6565b50809150505b92915050565b60008061274d8585612821565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16149150509392505050565b61281e8160405160240161279c91906139f8565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612677565b50565b60006041825114612867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285e90613a7a565b60405180910390fd5b60008060006020850151925060408501519150606085015160001a9050601b8160ff16101561289757601b810190505b601b8160ff1614806128ac5750601c8160ff16145b6128eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128e290613aba565b60405180910390fd5b6128f7868285856114f2565b935050505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061294357805160ff1916838001178555612971565b82800160010185558215612971579182015b82811115612970578251825591602001919060010190612955565b5b50905061297e9190612a19565b5090565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff1681526020016000801916815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081525090565b6040518061048001604052806024905b6060815260200190600190039081612a015790505090565b5b80821115612a32576000816000905550600101612a1a565b5090565b600081359050612a4581613eb1565b92915050565b600082601f830112612a5c57600080fd5b6024612a6f612a6a82613d04565b613cd7565b91508183856020840282011115612a8557600080fd5b60005b83811015612ab55781612a9b8882612a36565b845260208401935060208301925050600181019050612a88565b5050505092915050565b600081519050612ace81613ec8565b92915050565b600081359050612ae381613edf565b92915050565b60008083601f840112612afb57600080fd5b8235905067ffffffffffffffff811115612b1457600080fd5b602083019150836001820283011115612b2c57600080fd5b9250929050565b600082601f830112612b4457600080fd5b8135612b57612b5282613d26565b613cd7565b91508082526020830160208301858383011115612b7357600080fd5b612b7e838284613e19565b50505092915050565b600081359050612b9681613ef6565b92915050565b600081359050612bab81613f0d565b92915050565b600081359050612bc081613f24565b92915050565b600060208284031215612bd857600080fd5b6000612be684828501612a36565b91505092915050565b600080600060608486031215612c0457600080fd5b6000612c1286828701612a36565b9350506020612c2386828701612a36565b9250506040612c3486828701612b87565b9150509250925092565b60008060408385031215612c5157600080fd5b6000612c5f85828601612a36565b9250506020612c7085828601612b87565b9150509250929050565b60008060006104a08486031215612c9057600080fd5b6000612c9e86828701612a4b565b93505061048084013567ffffffffffffffff811115612cbc57600080fd5b612cc886828701612ae9565b92509250509250925092565b600060208284031215612ce657600080fd5b6000612cf484828501612abf565b91505092915050565b600060208284031215612d0f57600080fd5b6000612d1d84828501612ad4565b91505092915050565b60008060408385031215612d3957600080fd5b6000612d4785828601612ad4565b9250506020612d5885828601612a36565b9150509250929050565b6000806000806104c08587031215612d7957600080fd5b6000612d8787828801612ad4565b9450506020612d9887828801612a4b565b9350506104a085013567ffffffffffffffff811115612db657600080fd5b612dc287828801612ae9565b925092505092959194509250565b60008060008060808587031215612de657600080fd5b6000612df487828801612ad4565b9450506020612e0587828801612bb1565b9350506040612e1687828801612ad4565b9250506060612e2787828801612ad4565b91505092959194509250565b60008060008060008060a08789031215612e4c57600080fd5b6000612e5a89828a01612ad4565b9650506020612e6b89828a01612bb1565b9550506040612e7c89828a01612b9c565b9450506060612e8d89828a01612a36565b935050608087013567ffffffffffffffff811115612eaa57600080fd5b612eb689828a01612ae9565b92509250509295509295509295565b600060208284031215612ed757600080fd5b600082013567ffffffffffffffff811115612ef157600080fd5b612efd84828501612b33565b91505092915050565b600060208284031215612f1857600080fd5b6000612f2684828501612b87565b91505092915050565b60008060408385031215612f4257600080fd5b6000612f5085828601612b9c565b9250506020612f6185828601612bb1565b9150509250929050565b60008060408385031215612f7e57600080fd5b6000612f8c85828601612bb1565b9250506020612f9d85828601612b9c565b9150509250929050565b612fb081613da6565b82525050565b612fbf81613da6565b82525050565b612fd6612fd182613da6565b613e5b565b82525050565b612fe581613db8565b82525050565b612ff481613dc4565b82525050565b61300381613dc4565b82525050565b61301a61301582613dc4565b613e6d565b82525050565b600061302b82613d52565b6130358185613d68565b9350613045818560208601613e28565b61304e81613e93565b840191505092915050565b600061306482613d52565b61306e8185613d79565b935061307e818560208601613e28565b61308781613e93565b840191505092915050565b600061309d82613d52565b6130a78185613d8a565b93506130b7818560208601613e28565b80840191505092915050565b60006130ce82613d5d565b6130d88185613d95565b93506130e8818560208601613e28565b6130f181613e93565b840191505092915050565b6000613109602083613d95565b91507f45524332303a206f7065726174696f6e20646964206e6f7420737563636565646000830152602082019050919050565b6000613149601e83613d95565b91507f73656e646572206d7573742062652062726964676520636f6e747261637400006000830152602082019050919050565b6000613189601483613d95565b91507f736c6963696e67206f7574206f662072616e67650000000000000000000000006000830152602082019050919050565b60006131c9601683613d95565b91507f5265717569726520636f7272656374206c656e677468000000000000000000006000830152602082019050919050565b6000613209602483613d95565b91507f70726f766964656420636f6e7472616374206973206e6f742077686974656c6960008301527f73746564000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061326f601b83613d95565b91507f5369676e61747572652076657273696f6e206e6f74206d6174636800000000006000830152602082019050919050565b60006132af601283613d95565b91507f45524332303a2063616c6c206661696c656400000000000000000000000000006000830152602082019050919050565b60006132ef601b83613d95565b91507f5f76657269667941627446726f6d43616c6c44617461204661696c00000000006000830152602082019050919050565b600061332f601c83613d95565b91507f636f6d6520746f20657263323068616e646c65207769746864726177000000006000830152602082019050919050565b600061336f600e83613d95565b91507f736c6963655f6f766572666c6f770000000000000000000000000000000000006000830152602082019050919050565b60006133af601283613d95565b91507f6572633230206465706f73697420746f203200000000000000000000000000006000830152602082019050919050565b60006133ef602483613d95565b91507f636f6d6520746f20657263323068616e646c65206765744465706f736974526560008301527f636f7264000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613455601983613d95565b91507f5f76657269667941627446726f6d43616c6c44617461204f4b000000000000006000830152602082019050919050565b6000613495601483613d95565b91507f6572633230206465706f73697420746f20312e350000000000000000000000006000830152602082019050919050565b60006134d5600983613d95565b91507f636f6d6520746f203300000000000000000000000000000000000000000000006000830152602082019050919050565b6000613515602d83613d95565b91507f636f6d6520746f20657263323068616e646c65206578656375746550726f706f60008301527f73616c206d696e744552433230000000000000000000000000000000000000006020830152604082019050919050565b600061357b600b83613d95565b91507f636f6d6520746f20312e350000000000000000000000000000000000000000006000830152602082019050919050565b60006135bb601183613d95565b91507f736c6963655f6f75744f66426f756e64730000000000000000000000000000006000830152602082019050919050565b60006135fb603483613d95565b91507f636f6d6520746f206578656375746550726f706f73616c20657263323068616e60008301527f646c65206765744465706f7369745265636f72640000000000000000000000006020830152604082019050919050565b6000613661602883613d95565b91507f70726f766964656420746f6b656e41646472657373206973206e6f742077686960008301527f74656c69737465640000000000000000000000000000000000000000000000006020830152604082019050919050565b600060e0830160008301516136d26000860182612fa7565b5060208301516136e56020860182613792565b5060408301516136f86040860182612feb565b50606083015184820360608601526137108282613020565b91505060808301516137256080860182612fa7565b5060a083015161373860a086018261375d565b5060c083015184820360c08601526137508282613020565b9150508091505092915050565b61376681613dee565b82525050565b61377581613dee565b82525050565b61378c61378782613dee565b613e89565b82525050565b61379b81613e0c565b82525050565b6137aa81613e0c565b82525050565b60006137bc8284612fc5565b60148201915081905092915050565b60006137d78284613009565b60208201915081905092915050565b60006137f28284613092565b915081905092915050565b60006138098285613092565b91506138158284613009565b6020820191508190509392505050565b6000613831828461377b565b60208201915081905092915050565b60006020820190506138556000830184612fb6565b92915050565b60006060820190506138706000830186612fb6565b61387d6020830185612fb6565b61388a604083018461376c565b949350505050565b60006040820190506138a76000830185612fb6565b6138b4602083018461376c565b9392505050565b600060e0820190506138d0600083018a612fb6565b6138dd60208301896137a1565b6138ea6040830188612ffa565b81810360608301526138fc8187613059565b905061390b6080830186612fb6565b61391860a083018561376c565b81810360c083015261392a8184613059565b905098975050505050505050565b600060208201905061394d6000830184612fdc565b92915050565b60006080820190506139686000830187612fdc565b6139756020830186612fdc565b6139826040830185612fb6565b61398f606083018461376c565b95945050505050565b60006020820190506139ad6000830184612ffa565b92915050565b60006080820190506139c86000830187612ffa565b6139d560208301866137a1565b6139e26040830185612ffa565b6139ef6060830184612ffa565b95945050505050565b60006020820190508181036000830152613a1281846130c3565b905092915050565b60006020820190508181036000830152613a33816130fc565b9050919050565b60006020820190508181036000830152613a538161313c565b9050919050565b60006020820190508181036000830152613a738161317c565b9050919050565b60006020820190508181036000830152613a93816131bc565b9050919050565b60006020820190508181036000830152613ab3816131fc565b9050919050565b60006020820190508181036000830152613ad381613262565b9050919050565b60006020820190508181036000830152613af3816132a2565b9050919050565b60006020820190508181036000830152613b13816132e2565b9050919050565b60006020820190508181036000830152613b3381613322565b9050919050565b60006020820190508181036000830152613b5381613362565b9050919050565b60006020820190508181036000830152613b73816133a2565b9050919050565b60006020820190508181036000830152613b93816133e2565b9050919050565b60006020820190508181036000830152613bb381613448565b9050919050565b60006020820190508181036000830152613bd381613488565b9050919050565b60006020820190508181036000830152613bf3816134c8565b9050919050565b60006020820190508181036000830152613c1381613508565b9050919050565b60006020820190508181036000830152613c338161356e565b9050919050565b60006020820190508181036000830152613c53816135ae565b9050919050565b60006020820190508181036000830152613c73816135ee565b9050919050565b60006020820190508181036000830152613c9381613654565b9050919050565b60006020820190508181036000830152613cb481846136ba565b905092915050565b6000602082019050613cd1600083018461376c565b92915050565b6000604051905081810181811067ffffffffffffffff82111715613cfa57600080fd5b8060405250919050565b600067ffffffffffffffff821115613d1b57600080fd5b602082029050919050565b600067ffffffffffffffff821115613d3d57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000613db182613dce565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613e46578082015181840152602081019050613e2b565b83811115613e55576000848401525b50505050565b6000613e6682613e77565b9050919050565b6000819050919050565b6000613e8282613ea4565b9050919050565b6000819050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b613eba81613da6565b8114613ec557600080fd5b50565b613ed181613db8565b8114613edc57600080fd5b50565b613ee881613dc4565b8114613ef357600080fd5b50565b613eff81613dee565b8114613f0a57600080fd5b50565b613f1681613df8565b8114613f2157600080fd5b50565b613f2d81613e0c565b8114613f3857600080fd5b5056fea26469706673582212207806d6b659e9e7db85fa219d1ddd89444c194babeabb2afecfa432169253749464736f6c634300060c0033"

// DeployERC20Handler deploys a new Ethereum contract, binding an instance of ERC20Handler to it.
func DeployERC20Handler(auth *bind.TransactOpts, backend bind.ContractBackend, bridgeAddress common.Address, initialResourceIDs [][32]byte, initialContractAddresses []common.Address, burnableContractAddresses []common.Address) (common.Address, *types.Transaction, *ERC20Handler, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20HandlerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ERC20HandlerBin), backend, bridgeAddress, initialResourceIDs, initialContractAddresses, burnableContractAddresses)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20Handler{ERC20HandlerCaller: ERC20HandlerCaller{contract: contract}, ERC20HandlerTransactor: ERC20HandlerTransactor{contract: contract}, ERC20HandlerFilterer: ERC20HandlerFilterer{contract: contract}}, nil
}

// ERC20Handler is an auto generated Go binding around an Ethereum contract.
type ERC20Handler struct {
	ERC20HandlerCaller     // Read-only binding to the contract
	ERC20HandlerTransactor // Write-only binding to the contract
	ERC20HandlerFilterer   // Log filterer for contract events
}

// ERC20HandlerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20HandlerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20HandlerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20HandlerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20HandlerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20HandlerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20HandlerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20HandlerSession struct {
	Contract     *ERC20Handler     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20HandlerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20HandlerCallerSession struct {
	Contract *ERC20HandlerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ERC20HandlerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20HandlerTransactorSession struct {
	Contract     *ERC20HandlerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ERC20HandlerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20HandlerRaw struct {
	Contract *ERC20Handler // Generic contract binding to access the raw methods on
}

// ERC20HandlerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20HandlerCallerRaw struct {
	Contract *ERC20HandlerCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20HandlerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20HandlerTransactorRaw struct {
	Contract *ERC20HandlerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20Handler creates a new instance of ERC20Handler, bound to a specific deployed contract.
func NewERC20Handler(address common.Address, backend bind.ContractBackend) (*ERC20Handler, error) {
	contract, err := bindERC20Handler(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20Handler{ERC20HandlerCaller: ERC20HandlerCaller{contract: contract}, ERC20HandlerTransactor: ERC20HandlerTransactor{contract: contract}, ERC20HandlerFilterer: ERC20HandlerFilterer{contract: contract}}, nil
}

// NewERC20HandlerCaller creates a new read-only instance of ERC20Handler, bound to a specific deployed contract.
func NewERC20HandlerCaller(address common.Address, caller bind.ContractCaller) (*ERC20HandlerCaller, error) {
	contract, err := bindERC20Handler(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20HandlerCaller{contract: contract}, nil
}

// NewERC20HandlerTransactor creates a new write-only instance of ERC20Handler, bound to a specific deployed contract.
func NewERC20HandlerTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20HandlerTransactor, error) {
	contract, err := bindERC20Handler(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20HandlerTransactor{contract: contract}, nil
}

// NewERC20HandlerFilterer creates a new log filterer instance of ERC20Handler, bound to a specific deployed contract.
func NewERC20HandlerFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20HandlerFilterer, error) {
	contract, err := bindERC20Handler(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20HandlerFilterer{contract: contract}, nil
}

// bindERC20Handler binds a generic wrapper to an already deployed contract.
func bindERC20Handler(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20HandlerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20Handler *ERC20HandlerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20Handler.Contract.ERC20HandlerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20Handler *ERC20HandlerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Handler.Contract.ERC20HandlerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20Handler *ERC20HandlerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20Handler.Contract.ERC20HandlerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20Handler *ERC20HandlerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20Handler.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20Handler *ERC20HandlerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Handler.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20Handler *ERC20HandlerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20Handler.Contract.contract.Transact(opts, method, params...)
}

// BridgeAddress is a free data retrieval call binding the contract method 0x318c136e.
//
// Solidity: function _bridgeAddress() view returns(address)
func (_ERC20Handler *ERC20HandlerCaller) BridgeAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20Handler.contract.Call(opts, &out, "_bridgeAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeAddress is a free data retrieval call binding the contract method 0x318c136e.
//
// Solidity: function _bridgeAddress() view returns(address)
func (_ERC20Handler *ERC20HandlerSession) BridgeAddress() (common.Address, error) {
	return _ERC20Handler.Contract.BridgeAddress(&_ERC20Handler.CallOpts)
}

// BridgeAddress is a free data retrieval call binding the contract method 0x318c136e.
//
// Solidity: function _bridgeAddress() view returns(address)
func (_ERC20Handler *ERC20HandlerCallerSession) BridgeAddress() (common.Address, error) {
	return _ERC20Handler.Contract.BridgeAddress(&_ERC20Handler.CallOpts)
}

// BurnList is a free data retrieval call binding the contract method 0x6a70d081.
//
// Solidity: function _burnList(address ) view returns(bool)
func (_ERC20Handler *ERC20HandlerCaller) BurnList(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ERC20Handler.contract.Call(opts, &out, "_burnList", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// BurnList is a free data retrieval call binding the contract method 0x6a70d081.
//
// Solidity: function _burnList(address ) view returns(bool)
func (_ERC20Handler *ERC20HandlerSession) BurnList(arg0 common.Address) (bool, error) {
	return _ERC20Handler.Contract.BurnList(&_ERC20Handler.CallOpts, arg0)
}

// BurnList is a free data retrieval call binding the contract method 0x6a70d081.
//
// Solidity: function _burnList(address ) view returns(bool)
func (_ERC20Handler *ERC20HandlerCallerSession) BurnList(arg0 common.Address) (bool, error) {
	return _ERC20Handler.Contract.BurnList(&_ERC20Handler.CallOpts, arg0)
}

// ContractWhitelist is a free data retrieval call binding the contract method 0x7f79bea8.
//
// Solidity: function _contractWhitelist(address ) view returns(bool)
func (_ERC20Handler *ERC20HandlerCaller) ContractWhitelist(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ERC20Handler.contract.Call(opts, &out, "_contractWhitelist", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContractWhitelist is a free data retrieval call binding the contract method 0x7f79bea8.
//
// Solidity: function _contractWhitelist(address ) view returns(bool)
func (_ERC20Handler *ERC20HandlerSession) ContractWhitelist(arg0 common.Address) (bool, error) {
	return _ERC20Handler.Contract.ContractWhitelist(&_ERC20Handler.CallOpts, arg0)
}

// ContractWhitelist is a free data retrieval call binding the contract method 0x7f79bea8.
//
// Solidity: function _contractWhitelist(address ) view returns(bool)
func (_ERC20Handler *ERC20HandlerCallerSession) ContractWhitelist(arg0 common.Address) (bool, error) {
	return _ERC20Handler.Contract.ContractWhitelist(&_ERC20Handler.CallOpts, arg0)
}

// DepositRecords is a free data retrieval call binding the contract method 0x4402027f.
//
// Solidity: function _depositRecords(uint8 , uint64 ) view returns(address _tokenAddress, uint8 _destinationChainID, bytes32 _resourceID, bytes _destinationRecipientAddress, address _depositer, uint256 _amount, bytes _signData)
func (_ERC20Handler *ERC20HandlerCaller) DepositRecords(opts *bind.CallOpts, arg0 uint8, arg1 uint64) (struct {
	TokenAddress                common.Address
	DestinationChainID          uint8
	ResourceID                  [32]byte
	DestinationRecipientAddress []byte
	Depositer                   common.Address
	Amount                      *big.Int
	SignData                    []byte
}, error) {
	var out []interface{}
	err := _ERC20Handler.contract.Call(opts, &out, "_depositRecords", arg0, arg1)

	outstruct := new(struct {
		TokenAddress                common.Address
		DestinationChainID          uint8
		ResourceID                  [32]byte
		DestinationRecipientAddress []byte
		Depositer                   common.Address
		Amount                      *big.Int
		SignData                    []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TokenAddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.DestinationChainID = *abi.ConvertType(out[1], new(uint8)).(*uint8)
	outstruct.ResourceID = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)
	outstruct.DestinationRecipientAddress = *abi.ConvertType(out[3], new([]byte)).(*[]byte)
	outstruct.Depositer = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Amount = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.SignData = *abi.ConvertType(out[6], new([]byte)).(*[]byte)

	return *outstruct, err

}

// DepositRecords is a free data retrieval call binding the contract method 0x4402027f.
//
// Solidity: function _depositRecords(uint8 , uint64 ) view returns(address _tokenAddress, uint8 _destinationChainID, bytes32 _resourceID, bytes _destinationRecipientAddress, address _depositer, uint256 _amount, bytes _signData)
func (_ERC20Handler *ERC20HandlerSession) DepositRecords(arg0 uint8, arg1 uint64) (struct {
	TokenAddress                common.Address
	DestinationChainID          uint8
	ResourceID                  [32]byte
	DestinationRecipientAddress []byte
	Depositer                   common.Address
	Amount                      *big.Int
	SignData                    []byte
}, error) {
	return _ERC20Handler.Contract.DepositRecords(&_ERC20Handler.CallOpts, arg0, arg1)
}

// DepositRecords is a free data retrieval call binding the contract method 0x4402027f.
//
// Solidity: function _depositRecords(uint8 , uint64 ) view returns(address _tokenAddress, uint8 _destinationChainID, bytes32 _resourceID, bytes _destinationRecipientAddress, address _depositer, uint256 _amount, bytes _signData)
func (_ERC20Handler *ERC20HandlerCallerSession) DepositRecords(arg0 uint8, arg1 uint64) (struct {
	TokenAddress                common.Address
	DestinationChainID          uint8
	ResourceID                  [32]byte
	DestinationRecipientAddress []byte
	Depositer                   common.Address
	Amount                      *big.Int
	SignData                    []byte
}, error) {
	return _ERC20Handler.Contract.DepositRecords(&_ERC20Handler.CallOpts, arg0, arg1)
}

// RecoverSigner2 is a free data retrieval call binding the contract method 0x8f667892.
//
// Solidity: function _recoverSigner2(bytes32 h, uint8 v, bytes32 r, bytes32 s) pure returns(address)
func (_ERC20Handler *ERC20HandlerCaller) RecoverSigner2(opts *bind.CallOpts, h [32]byte, v uint8, r [32]byte, s [32]byte) (common.Address, error) {
	var out []interface{}
	err := _ERC20Handler.contract.Call(opts, &out, "_recoverSigner2", h, v, r, s)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RecoverSigner2 is a free data retrieval call binding the contract method 0x8f667892.
//
// Solidity: function _recoverSigner2(bytes32 h, uint8 v, bytes32 r, bytes32 s) pure returns(address)
func (_ERC20Handler *ERC20HandlerSession) RecoverSigner2(h [32]byte, v uint8, r [32]byte, s [32]byte) (common.Address, error) {
	return _ERC20Handler.Contract.RecoverSigner2(&_ERC20Handler.CallOpts, h, v, r, s)
}

// RecoverSigner2 is a free data retrieval call binding the contract method 0x8f667892.
//
// Solidity: function _recoverSigner2(bytes32 h, uint8 v, bytes32 r, bytes32 s) pure returns(address)
func (_ERC20Handler *ERC20HandlerCallerSession) RecoverSigner2(h [32]byte, v uint8, r [32]byte, s [32]byte) (common.Address, error) {
	return _ERC20Handler.Contract.RecoverSigner2(&_ERC20Handler.CallOpts, h, v, r, s)
}

// ResourceIDToTokenContractAddress is a free data retrieval call binding the contract method 0x0a6d55d8.
//
// Solidity: function _resourceIDToTokenContractAddress(bytes32 ) view returns(address)
func (_ERC20Handler *ERC20HandlerCaller) ResourceIDToTokenContractAddress(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _ERC20Handler.contract.Call(opts, &out, "_resourceIDToTokenContractAddress", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ResourceIDToTokenContractAddress is a free data retrieval call binding the contract method 0x0a6d55d8.
//
// Solidity: function _resourceIDToTokenContractAddress(bytes32 ) view returns(address)
func (_ERC20Handler *ERC20HandlerSession) ResourceIDToTokenContractAddress(arg0 [32]byte) (common.Address, error) {
	return _ERC20Handler.Contract.ResourceIDToTokenContractAddress(&_ERC20Handler.CallOpts, arg0)
}

// ResourceIDToTokenContractAddress is a free data retrieval call binding the contract method 0x0a6d55d8.
//
// Solidity: function _resourceIDToTokenContractAddress(bytes32 ) view returns(address)
func (_ERC20Handler *ERC20HandlerCallerSession) ResourceIDToTokenContractAddress(arg0 [32]byte) (common.Address, error) {
	return _ERC20Handler.Contract.ResourceIDToTokenContractAddress(&_ERC20Handler.CallOpts, arg0)
}

// TokenContractAddressToResourceID is a free data retrieval call binding the contract method 0xc8ba6c87.
//
// Solidity: function _tokenContractAddressToResourceID(address ) view returns(bytes32)
func (_ERC20Handler *ERC20HandlerCaller) TokenContractAddressToResourceID(opts *bind.CallOpts, arg0 common.Address) ([32]byte, error) {
	var out []interface{}
	err := _ERC20Handler.contract.Call(opts, &out, "_tokenContractAddressToResourceID", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// TokenContractAddressToResourceID is a free data retrieval call binding the contract method 0xc8ba6c87.
//
// Solidity: function _tokenContractAddressToResourceID(address ) view returns(bytes32)
func (_ERC20Handler *ERC20HandlerSession) TokenContractAddressToResourceID(arg0 common.Address) ([32]byte, error) {
	return _ERC20Handler.Contract.TokenContractAddressToResourceID(&_ERC20Handler.CallOpts, arg0)
}

// TokenContractAddressToResourceID is a free data retrieval call binding the contract method 0xc8ba6c87.
//
// Solidity: function _tokenContractAddressToResourceID(address ) view returns(bytes32)
func (_ERC20Handler *ERC20HandlerCallerSession) TokenContractAddressToResourceID(arg0 common.Address) ([32]byte, error) {
	return _ERC20Handler.Contract.TokenContractAddressToResourceID(&_ERC20Handler.CallOpts, arg0)
}

// AddressToString is a free data retrieval call binding the contract method 0x5e57966d.
//
// Solidity: function addressToString(address account) pure returns(string)
func (_ERC20Handler *ERC20HandlerCaller) AddressToString(opts *bind.CallOpts, account common.Address) (string, error) {
	var out []interface{}
	err := _ERC20Handler.contract.Call(opts, &out, "addressToString", account)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AddressToString is a free data retrieval call binding the contract method 0x5e57966d.
//
// Solidity: function addressToString(address account) pure returns(string)
func (_ERC20Handler *ERC20HandlerSession) AddressToString(account common.Address) (string, error) {
	return _ERC20Handler.Contract.AddressToString(&_ERC20Handler.CallOpts, account)
}

// AddressToString is a free data retrieval call binding the contract method 0x5e57966d.
//
// Solidity: function addressToString(address account) pure returns(string)
func (_ERC20Handler *ERC20HandlerCallerSession) AddressToString(account common.Address) (string, error) {
	return _ERC20Handler.Contract.AddressToString(&_ERC20Handler.CallOpts, account)
}

// Bytes32ToString is a free data retrieval call binding the contract method 0x9201de55.
//
// Solidity: function bytes32ToString(bytes32 value) pure returns(string)
func (_ERC20Handler *ERC20HandlerCaller) Bytes32ToString(opts *bind.CallOpts, value [32]byte) (string, error) {
	var out []interface{}
	err := _ERC20Handler.contract.Call(opts, &out, "bytes32ToString", value)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Bytes32ToString is a free data retrieval call binding the contract method 0x9201de55.
//
// Solidity: function bytes32ToString(bytes32 value) pure returns(string)
func (_ERC20Handler *ERC20HandlerSession) Bytes32ToString(value [32]byte) (string, error) {
	return _ERC20Handler.Contract.Bytes32ToString(&_ERC20Handler.CallOpts, value)
}

// Bytes32ToString is a free data retrieval call binding the contract method 0x9201de55.
//
// Solidity: function bytes32ToString(bytes32 value) pure returns(string)
func (_ERC20Handler *ERC20HandlerCallerSession) Bytes32ToString(value [32]byte) (string, error) {
	return _ERC20Handler.Contract.Bytes32ToString(&_ERC20Handler.CallOpts, value)
}

// BytesToString is a free data retrieval call binding the contract method 0x39614e4f.
//
// Solidity: function bytesToString(bytes value) pure returns(string)
func (_ERC20Handler *ERC20HandlerCaller) BytesToString(opts *bind.CallOpts, value []byte) (string, error) {
	var out []interface{}
	err := _ERC20Handler.contract.Call(opts, &out, "bytesToString", value)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BytesToString is a free data retrieval call binding the contract method 0x39614e4f.
//
// Solidity: function bytesToString(bytes value) pure returns(string)
func (_ERC20Handler *ERC20HandlerSession) BytesToString(value []byte) (string, error) {
	return _ERC20Handler.Contract.BytesToString(&_ERC20Handler.CallOpts, value)
}

// BytesToString is a free data retrieval call binding the contract method 0x39614e4f.
//
// Solidity: function bytesToString(bytes value) pure returns(string)
func (_ERC20Handler *ERC20HandlerCallerSession) BytesToString(value []byte) (string, error) {
	return _ERC20Handler.Contract.BytesToString(&_ERC20Handler.CallOpts, value)
}

// GetDepositRecord is a free data retrieval call binding the contract method 0xba484c09.
//
// Solidity: function getDepositRecord(uint64 depositNonce, uint8 destId) view returns((address,uint8,bytes32,bytes,address,uint256,bytes))
func (_ERC20Handler *ERC20HandlerCaller) GetDepositRecord(opts *bind.CallOpts, depositNonce uint64, destId uint8) (ERC20HandlerDepositRecord, error) {
	var out []interface{}
	err := _ERC20Handler.contract.Call(opts, &out, "getDepositRecord", depositNonce, destId)

	if err != nil {
		return *new(ERC20HandlerDepositRecord), err
	}

	out0 := *abi.ConvertType(out[0], new(ERC20HandlerDepositRecord)).(*ERC20HandlerDepositRecord)

	return out0, err

}

// GetDepositRecord is a free data retrieval call binding the contract method 0xba484c09.
//
// Solidity: function getDepositRecord(uint64 depositNonce, uint8 destId) view returns((address,uint8,bytes32,bytes,address,uint256,bytes))
func (_ERC20Handler *ERC20HandlerSession) GetDepositRecord(depositNonce uint64, destId uint8) (ERC20HandlerDepositRecord, error) {
	return _ERC20Handler.Contract.GetDepositRecord(&_ERC20Handler.CallOpts, depositNonce, destId)
}

// GetDepositRecord is a free data retrieval call binding the contract method 0xba484c09.
//
// Solidity: function getDepositRecord(uint64 depositNonce, uint8 destId) view returns((address,uint8,bytes32,bytes,address,uint256,bytes))
func (_ERC20Handler *ERC20HandlerCallerSession) GetDepositRecord(depositNonce uint64, destId uint8) (ERC20HandlerDepositRecord, error) {
	return _ERC20Handler.Contract.GetDepositRecord(&_ERC20Handler.CallOpts, depositNonce, destId)
}

// ToStringBase is a free data retrieval call binding the contract method 0x8d1b75e4.
//
// Solidity: function toStringBase(bytes data) pure returns(string)
func (_ERC20Handler *ERC20HandlerCaller) ToStringBase(opts *bind.CallOpts, data []byte) (string, error) {
	var out []interface{}
	err := _ERC20Handler.contract.Call(opts, &out, "toStringBase", data)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToStringBase is a free data retrieval call binding the contract method 0x8d1b75e4.
//
// Solidity: function toStringBase(bytes data) pure returns(string)
func (_ERC20Handler *ERC20HandlerSession) ToStringBase(data []byte) (string, error) {
	return _ERC20Handler.Contract.ToStringBase(&_ERC20Handler.CallOpts, data)
}

// ToStringBase is a free data retrieval call binding the contract method 0x8d1b75e4.
//
// Solidity: function toStringBase(bytes data) pure returns(string)
func (_ERC20Handler *ERC20HandlerCallerSession) ToStringBase(data []byte) (string, error) {
	return _ERC20Handler.Contract.ToStringBase(&_ERC20Handler.CallOpts, data)
}

// UintToString is a free data retrieval call binding the contract method 0xe9395679.
//
// Solidity: function uintToString(uint256 value) pure returns(string)
func (_ERC20Handler *ERC20HandlerCaller) UintToString(opts *bind.CallOpts, value *big.Int) (string, error) {
	var out []interface{}
	err := _ERC20Handler.contract.Call(opts, &out, "uintToString", value)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// UintToString is a free data retrieval call binding the contract method 0xe9395679.
//
// Solidity: function uintToString(uint256 value) pure returns(string)
func (_ERC20Handler *ERC20HandlerSession) UintToString(value *big.Int) (string, error) {
	return _ERC20Handler.Contract.UintToString(&_ERC20Handler.CallOpts, value)
}

// UintToString is a free data retrieval call binding the contract method 0xe9395679.
//
// Solidity: function uintToString(uint256 value) pure returns(string)
func (_ERC20Handler *ERC20HandlerCallerSession) UintToString(value *big.Int) (string, error) {
	return _ERC20Handler.Contract.UintToString(&_ERC20Handler.CallOpts, value)
}

// SafeTransferETH is a paid mutator transaction binding the contract method 0x5de11799.
//
// Solidity: function _safeTransferETH(address _to, uint256 _value) returns()
func (_ERC20Handler *ERC20HandlerTransactor) SafeTransferETH(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ERC20Handler.contract.Transact(opts, "_safeTransferETH", _to, _value)
}

// SafeTransferETH is a paid mutator transaction binding the contract method 0x5de11799.
//
// Solidity: function _safeTransferETH(address _to, uint256 _value) returns()
func (_ERC20Handler *ERC20HandlerSession) SafeTransferETH(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ERC20Handler.Contract.SafeTransferETH(&_ERC20Handler.TransactOpts, _to, _value)
}

// SafeTransferETH is a paid mutator transaction binding the contract method 0x5de11799.
//
// Solidity: function _safeTransferETH(address _to, uint256 _value) returns()
func (_ERC20Handler *ERC20HandlerTransactorSession) SafeTransferETH(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ERC20Handler.Contract.SafeTransferETH(&_ERC20Handler.TransactOpts, _to, _value)
}

// Deposit is a paid mutator transaction binding the contract method 0x38995da9.
//
// Solidity: function deposit(bytes32 resourceID, uint8 destinationChainID, uint64 depositNonce, address depositer, bytes data) returns()
func (_ERC20Handler *ERC20HandlerTransactor) Deposit(opts *bind.TransactOpts, resourceID [32]byte, destinationChainID uint8, depositNonce uint64, depositer common.Address, data []byte) (*types.Transaction, error) {
	return _ERC20Handler.contract.Transact(opts, "deposit", resourceID, destinationChainID, depositNonce, depositer, data)
}

// Deposit is a paid mutator transaction binding the contract method 0x38995da9.
//
// Solidity: function deposit(bytes32 resourceID, uint8 destinationChainID, uint64 depositNonce, address depositer, bytes data) returns()
func (_ERC20Handler *ERC20HandlerSession) Deposit(resourceID [32]byte, destinationChainID uint8, depositNonce uint64, depositer common.Address, data []byte) (*types.Transaction, error) {
	return _ERC20Handler.Contract.Deposit(&_ERC20Handler.TransactOpts, resourceID, destinationChainID, depositNonce, depositer, data)
}

// Deposit is a paid mutator transaction binding the contract method 0x38995da9.
//
// Solidity: function deposit(bytes32 resourceID, uint8 destinationChainID, uint64 depositNonce, address depositer, bytes data) returns()
func (_ERC20Handler *ERC20HandlerTransactorSession) Deposit(resourceID [32]byte, destinationChainID uint8, depositNonce uint64, depositer common.Address, data []byte) (*types.Transaction, error) {
	return _ERC20Handler.Contract.Deposit(&_ERC20Handler.TransactOpts, resourceID, destinationChainID, depositNonce, depositer, data)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0x138f0b8b.
//
// Solidity: function executeProposal(bytes32 resourceID, address[36] signers, bytes data) returns(bool, bool, address, uint256)
func (_ERC20Handler *ERC20HandlerTransactor) ExecuteProposal(opts *bind.TransactOpts, resourceID [32]byte, signers [36]common.Address, data []byte) (*types.Transaction, error) {
	return _ERC20Handler.contract.Transact(opts, "executeProposal", resourceID, signers, data)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0x138f0b8b.
//
// Solidity: function executeProposal(bytes32 resourceID, address[36] signers, bytes data) returns(bool, bool, address, uint256)
func (_ERC20Handler *ERC20HandlerSession) ExecuteProposal(resourceID [32]byte, signers [36]common.Address, data []byte) (*types.Transaction, error) {
	return _ERC20Handler.Contract.ExecuteProposal(&_ERC20Handler.TransactOpts, resourceID, signers, data)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0x138f0b8b.
//
// Solidity: function executeProposal(bytes32 resourceID, address[36] signers, bytes data) returns(bool, bool, address, uint256)
func (_ERC20Handler *ERC20HandlerTransactorSession) ExecuteProposal(resourceID [32]byte, signers [36]common.Address, data []byte) (*types.Transaction, error) {
	return _ERC20Handler.Contract.ExecuteProposal(&_ERC20Handler.TransactOpts, resourceID, signers, data)
}

// FundERC20 is a paid mutator transaction binding the contract method 0x95601f09.
//
// Solidity: function fundERC20(address tokenAddress, address owner, uint256 amount) returns()
func (_ERC20Handler *ERC20HandlerTransactor) FundERC20(opts *bind.TransactOpts, tokenAddress common.Address, owner common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Handler.contract.Transact(opts, "fundERC20", tokenAddress, owner, amount)
}

// FundERC20 is a paid mutator transaction binding the contract method 0x95601f09.
//
// Solidity: function fundERC20(address tokenAddress, address owner, uint256 amount) returns()
func (_ERC20Handler *ERC20HandlerSession) FundERC20(tokenAddress common.Address, owner common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Handler.Contract.FundERC20(&_ERC20Handler.TransactOpts, tokenAddress, owner, amount)
}

// FundERC20 is a paid mutator transaction binding the contract method 0x95601f09.
//
// Solidity: function fundERC20(address tokenAddress, address owner, uint256 amount) returns()
func (_ERC20Handler *ERC20HandlerTransactorSession) FundERC20(tokenAddress common.Address, owner common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Handler.Contract.FundERC20(&_ERC20Handler.TransactOpts, tokenAddress, owner, amount)
}

// SetBurnable is a paid mutator transaction binding the contract method 0x07b7ed99.
//
// Solidity: function setBurnable(address contractAddress) returns()
func (_ERC20Handler *ERC20HandlerTransactor) SetBurnable(opts *bind.TransactOpts, contractAddress common.Address) (*types.Transaction, error) {
	return _ERC20Handler.contract.Transact(opts, "setBurnable", contractAddress)
}

// SetBurnable is a paid mutator transaction binding the contract method 0x07b7ed99.
//
// Solidity: function setBurnable(address contractAddress) returns()
func (_ERC20Handler *ERC20HandlerSession) SetBurnable(contractAddress common.Address) (*types.Transaction, error) {
	return _ERC20Handler.Contract.SetBurnable(&_ERC20Handler.TransactOpts, contractAddress)
}

// SetBurnable is a paid mutator transaction binding the contract method 0x07b7ed99.
//
// Solidity: function setBurnable(address contractAddress) returns()
func (_ERC20Handler *ERC20HandlerTransactorSession) SetBurnable(contractAddress common.Address) (*types.Transaction, error) {
	return _ERC20Handler.Contract.SetBurnable(&_ERC20Handler.TransactOpts, contractAddress)
}

// SetResource is a paid mutator transaction binding the contract method 0xb8fa3736.
//
// Solidity: function setResource(bytes32 resourceID, address contractAddress) returns()
func (_ERC20Handler *ERC20HandlerTransactor) SetResource(opts *bind.TransactOpts, resourceID [32]byte, contractAddress common.Address) (*types.Transaction, error) {
	return _ERC20Handler.contract.Transact(opts, "setResource", resourceID, contractAddress)
}

// SetResource is a paid mutator transaction binding the contract method 0xb8fa3736.
//
// Solidity: function setResource(bytes32 resourceID, address contractAddress) returns()
func (_ERC20Handler *ERC20HandlerSession) SetResource(resourceID [32]byte, contractAddress common.Address) (*types.Transaction, error) {
	return _ERC20Handler.Contract.SetResource(&_ERC20Handler.TransactOpts, resourceID, contractAddress)
}

// SetResource is a paid mutator transaction binding the contract method 0xb8fa3736.
//
// Solidity: function setResource(bytes32 resourceID, address contractAddress) returns()
func (_ERC20Handler *ERC20HandlerTransactorSession) SetResource(resourceID [32]byte, contractAddress common.Address) (*types.Transaction, error) {
	return _ERC20Handler.Contract.SetResource(&_ERC20Handler.TransactOpts, resourceID, contractAddress)
}

// Test is a paid mutator transaction binding the contract method 0xcc3dd1af.
//
// Solidity: function test(address[36] signers, bytes data) returns()
func (_ERC20Handler *ERC20HandlerTransactor) Test(opts *bind.TransactOpts, signers [36]common.Address, data []byte) (*types.Transaction, error) {
	return _ERC20Handler.contract.Transact(opts, "test", signers, data)
}

// Test is a paid mutator transaction binding the contract method 0xcc3dd1af.
//
// Solidity: function test(address[36] signers, bytes data) returns()
func (_ERC20Handler *ERC20HandlerSession) Test(signers [36]common.Address, data []byte) (*types.Transaction, error) {
	return _ERC20Handler.Contract.Test(&_ERC20Handler.TransactOpts, signers, data)
}

// Test is a paid mutator transaction binding the contract method 0xcc3dd1af.
//
// Solidity: function test(address[36] signers, bytes data) returns()
func (_ERC20Handler *ERC20HandlerTransactorSession) Test(signers [36]common.Address, data []byte) (*types.Transaction, error) {
	return _ERC20Handler.Contract.Test(&_ERC20Handler.TransactOpts, signers, data)
}

// TransferWETH is a paid mutator transaction binding the contract method 0x783b6c54.
//
// Solidity: function transferWETH(address to, uint256 amount) returns()
func (_ERC20Handler *ERC20HandlerTransactor) TransferWETH(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Handler.contract.Transact(opts, "transferWETH", to, amount)
}

// TransferWETH is a paid mutator transaction binding the contract method 0x783b6c54.
//
// Solidity: function transferWETH(address to, uint256 amount) returns()
func (_ERC20Handler *ERC20HandlerSession) TransferWETH(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Handler.Contract.TransferWETH(&_ERC20Handler.TransactOpts, to, amount)
}

// TransferWETH is a paid mutator transaction binding the contract method 0x783b6c54.
//
// Solidity: function transferWETH(address to, uint256 amount) returns()
func (_ERC20Handler *ERC20HandlerTransactorSession) TransferWETH(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Handler.Contract.TransferWETH(&_ERC20Handler.TransactOpts, to, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address tokenAddress, address recipient, uint256 amount) returns()
func (_ERC20Handler *ERC20HandlerTransactor) Withdraw(opts *bind.TransactOpts, tokenAddress common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Handler.contract.Transact(opts, "withdraw", tokenAddress, recipient, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address tokenAddress, address recipient, uint256 amount) returns()
func (_ERC20Handler *ERC20HandlerSession) Withdraw(tokenAddress common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Handler.Contract.Withdraw(&_ERC20Handler.TransactOpts, tokenAddress, recipient, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address tokenAddress, address recipient, uint256 amount) returns()
func (_ERC20Handler *ERC20HandlerTransactorSession) Withdraw(tokenAddress common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Handler.Contract.Withdraw(&_ERC20Handler.TransactOpts, tokenAddress, recipient, amount)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ERC20Handler *ERC20HandlerTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Handler.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ERC20Handler *ERC20HandlerSession) Receive() (*types.Transaction, error) {
	return _ERC20Handler.Contract.Receive(&_ERC20Handler.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ERC20Handler *ERC20HandlerTransactorSession) Receive() (*types.Transaction, error) {
	return _ERC20Handler.Contract.Receive(&_ERC20Handler.TransactOpts)
}

// ERC20HandlerLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the ERC20Handler contract.
type ERC20HandlerLogStringIterator struct {
	Event *ERC20HandlerLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20HandlerLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20HandlerLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20HandlerLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20HandlerLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20HandlerLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20HandlerLogString represents a LogString event raised by the ERC20Handler contract.
type ERC20HandlerLogString struct {
	Data string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0xa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f.
//
// Solidity: event LogString(string data)
func (_ERC20Handler *ERC20HandlerFilterer) FilterLogString(opts *bind.FilterOpts) (*ERC20HandlerLogStringIterator, error) {

	logs, sub, err := _ERC20Handler.contract.FilterLogs(opts, "LogString")
	if err != nil {
		return nil, err
	}
	return &ERC20HandlerLogStringIterator{contract: _ERC20Handler.contract, event: "LogString", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0xa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f.
//
// Solidity: event LogString(string data)
func (_ERC20Handler *ERC20HandlerFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *ERC20HandlerLogString) (event.Subscription, error) {

	logs, sub, err := _ERC20Handler.contract.WatchLogs(opts, "LogString")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20HandlerLogString)
				if err := _ERC20Handler.contract.UnpackLog(event, "LogString", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0xa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f.
//
// Solidity: event LogString(string data)
func (_ERC20Handler *ERC20HandlerFilterer) ParseLogString(log types.Log) (*ERC20HandlerLogString, error) {
	event := new(ERC20HandlerLogString)
	if err := _ERC20Handler.contract.UnpackLog(event, "LogString", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
